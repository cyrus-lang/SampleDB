import std::libc{printf};
import std::core{panic};
import engine;

func main() {
	#columns = engine::Column[3] {
		engine::Column { name: "id", ty: engine::DataType.Int },
		engine::Column { name: "name", ty: engine::DataType.Text },
		engine::Column { name: "age", ty: engine::DataType.Int },
	};
	#column_count: size_t = sizeof(columns) / sizeof(columns[0]);

	#table_name = "users";
	#table: engine::Table* = engine::Table.create(table_name, &columns, column_count);
	if (!table) {
		panic("failed to create table.");
		return;
	} 

	#value1 = engine::Value[3] {
		engine::Value { ty: engine::DataType.Int, data: engine::ValueData { int_value: 0 } },
		engine::Value { ty: engine::DataType.Text, data: engine::ValueData { text_value: "Taha" } },
		engine::Value { ty: engine::DataType.Int, data: engine::ValueData { int_value: 18 } }
	};
	table->insert(&value1);

	#value2 = engine::Value[3] {
		engine::Value { ty: engine::DataType.Int, data: engine::ValueData { int_value: 1 } },
		engine::Value { ty: engine::DataType.Text, data: engine::ValueData { text_value: "Cyrus" } },
		engine::Value { ty: engine::DataType.Int, data: engine::ValueData { int_value: 1 } }
	};
	table->insert(&value2);

	printf("Successfully created table.\n\n");
	table->print();
	table->free();
}